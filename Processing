void drawButton(float x, float y, float ancho, float alto, String etiqueta, color c, boolean activado) {
  // Dibuja un botón con una etiqueta
  stroke(0);
  strokeWeight(2);
  fill(c);
  rect(x, y, ancho, alto, 10);
  fill(255);
  noStroke();
  textAlign(CENTER, CENTER);
  textSize(14);
  text(etiqueta, x + ancho / 2, y + alto / 2);

  // Si el botón está activado, dibuja un contorno alrededor
  if (activado) {
    noFill();
    stroke(0);
    rect(x, y, ancho, alto, 10);
  }

  // Escucha la comunicación serie desde Arduino
  while (arduinoPort.available() > 0) {
    char c = arduinoPort.readChar();

    // Si se recibe un carácter de nueva línea, procesa los datos
    if (c == '\n') {
      processArduinoData(arduinoData);
      arduinoData = "";  // Reinicia la cadena de datos
    } else {
      arduinoData += c;  // Agrega el carácter a la cadena
    }
  }
}

// Función para procesar los datos recibidos desde Arduino
void processArduinoData(String data) {
  // Verifica si los datos comienzan con la etiqueta "Arduino:"
  if (data.startsWith("Arduino:")) {
    // Separa los datos de la patente y el modelo de auto
    String[] parts = split(data.substring(8), ',');
    String patente = parts[0];
    String modeloDeAuto = parts[1];

    // Ahora puedes hacer lo que quieras con la patente y el modeloDeAuto
    // Por ejemplo, agregarlos a la tabla de registro
    TableRow newRow = registroTable.addRow();
    newRow.setString("Patente", patente);
    newRow.setString("Modelo de Auto", modeloDeAuto);
  }
}

void drawTable(float x, float y, float ancho, float alto) {
  // Dibuja la tabla
  int numRows = registroTable.getRowCount();
  int numCols = registroTable.getColumnCount();

  float cellWidth = ancho / numCols;
  float cellHeight = alto / (numRows + 1); // +1 para incluir la fila de encabezados

  textAlign(CENTER, CENTER);
  textSize(14);

  // Dibuja la fila de encabezados
  for (int j = 0; j < numCols; j++) {
    float cellX = x + j * cellWidth;
    float cellY = y;
    
    // Dibuja el borde de la celda
    stroke(0);
    noFill();
    rect(cellX, cellY, cellWidth, cellHeight);
    
    // Dibuja el contenido de la celda
    fill(0);
    text(registroTable.getColumnTitle(j), cellX + cellWidth / 2, cellY + cellHeight / 2);
  }

  // Dibuja el contenido de la tabla
  for (int i = 0; i < numRows; i++) {
    for (int j = 0; j < numCols; j++) {
      float cellX = x + j * cellWidth;
      float cellY = y + (i + 1) * cellHeight; // Se suma 1 para omitir la fila de encabezados

      // Dibuja el borde de la celda
      stroke(0);
      noFill();
      rect(cellX, cellY, cellWidth, cellHeight);

      // Dibuja el contenido de la celda
      fill(0);
      text(registroTable.getString(i, j), cellX + cellWidth / 2, cellY + cellHeight / 2);
    }
  }
}

void mousePressed() {
  // Verifica si se hizo clic en los botones de reproducción y grabación
  if (mouseX > 10 && mouseX < 70 && mouseY > height - 50 && mouseY < height - 20) {
    // Clic en el botón de Play
    reproduciendo = true;
    grabando = false;
    tiempoPrevio = millis();
  } else if (mouseX > 80 && mouseX < 140 && mouseY > height - 50 && mouseY < height - 20) {
    // Clic en el botón de Pausa
    reproduciendo = false;
  } else if (mouseX > 150 && mouseX < 210 && mouseY > height - 50 && mouseY < height - 20) {
    // Clic en el botón de Grabar
    grabando = !grabando;
    if (grabando) {
      tiempoPrevio = millis();
    } else {
      // Guarda la entrada actual en la tabla cuando se detiene la grabación
      TableRow newRow = registroTable.addRow();
      newRow.setString("Patente", patente);
      newRow.setString("Modelo de Auto", modeloDeAuto);
    }
  }
}

void keyPressed() {
  // Verifica qué tecla se presiona y agrega el modelo de auto y la patente
  if (key == 'm' || key == 'M') {
    modeloDeAuto = input("Ingrese el modelo de auto: ");
  } else if (key == 'p' || key == 'P') {
    patente = input("Ingrese la patente del auto: ");
  }
}

void keyTyped() {
  // Captura las teclas que se presionan para la entrada de texto
  if (keyCode != ENTER && keyCode != BACKSPACE) {
    entradaTexto += key;
  } else if (keyCode == BACKSPACE) {
    // Borra el último caracter si se presiona la tecla de retroceso
    if (entradaTexto.length() > 0) {
      entradaTexto = entradaTexto.substring(0, entradaTexto.length() - 1);
    }
  }
}

String input(String prompt) {
  return javax.swing.JOptionPane.showInputDialog(prompt);
}

void updateCounter() {
  // Actualiza el contador según el tiempo transcurrido
  int tiempoActual = millis();
  int tiempoTranscurrido = tiempoActual - tiempoPrevio;
  float segundosTranscurridos = tiempoTranscurrido / 1000.0;

  tiempoReproduccion += segundosTranscurridos;
  contador += int(segundosTranscurridos / 3600.0 * precioPorHora);
  tiempoPrevio = tiempoActual;
}

void updateTime() {
  // Actualiza el tiempo de reproducción según el tiempo transcurrido
  int tiempoActual = millis();
  int tiempoTranscurrido = tiempoActual - tiempoPrevio;
  tiempoReproduccion += tiempoTranscurrido / 1000.0;
  tiempoPrevio = tiempoActual;
}

String formatTime(float seconds) {
  // Convierte segundos a formato hora:minutos:segundos
  int horas = int(seconds / 3600);
  int minutos = int((seconds % 3600) / 60);
  int segundos = int(seconds % 60);
  return nf(horas, 2) + ":" + nf(minutos, 2) + ":" + nf(segundos, 2);
}




